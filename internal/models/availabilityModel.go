package models

import (
	"gorm.io/gorm"
	"time"
)

type Availability struct {
	gorm.Model

	ProviderID uint     `gorm:"not null" json:"provider_id"`
	Provider   Provider `gorm:"foreignKey:ProviderID"`

	// For recurring weekly slots
	DayOfWeek   *string `gorm:"type:varchar(20)" json:"day_of_week"` // e.g. "Monday"
	IsRecurring bool    `gorm:"default:false" json:"is_recurring"`

	// For specific one-time slots
	Date *time.Time `json:"date"` // e.g. 2025-09-20

	// Time range
	StartTime string `gorm:"type:varchar(5);not null" json:"start_time"` // "09:00"
	EndTime   string `gorm:"type:varchar(5);not null" json:"end_time"`   // "17:00"`
}

/*
How it works
	•	If is_recurring = true → use day_of_week + start_time + end_time.
	•	If is_recurring = false → use date + start_time + end_time.
	Slots are generated by combining this availability with the service duration.
⚖️ This way, each provider can have multiple availabilities (morning, afternoon, recurring, one-off, etc.), and your DB design stays flexible.

*/
